# Trinity Code Base:
The following repository contains the files used in the documentation and development of the Trinity mobile application.


Structure of repo:

APP - Contains source of application
|_
DOCS - Contains design documentation
|_Design Document
|_NPRE
DATA - Contains saved data, unused files, etc.
|_

--------------------------------------------------------------------------------------------------------------------------------------------


Trinity will be developed in three milestones, with each milestone having specific goals. 


Milestone 1 will focus on developing a prototype of the app in Figma, creating documentation to organize the structure and goals of the app, 
and laying the foundation for the initial application. This will involve designing the app's user interface, identifying the key features and 
functionalities, and creating a plan for the app's development.

Milestone 2 will involve implementing the core features of the app, conducting alpha testing with users, and incorporating feedback into the
development of the app. Key features of the app will include a search function to help users find communities and individuals with shared interests, 
a messaging system to facilitate communication between users, and tools to collaborate on projects.

Milestone 3 will focus on finalizing the app's user interface and features, implementing the final networking solution, and releasing version 1.0 of
the app. The app will be designed to be intuitive and user-friendly, with a clean and modern interface. The networking solution will be reliable and 
secure, ensuring that users can connect with others without fear of privacy breaches or data leaks.


--------------------------------------------------------------------------------------------------------------------------------------------


This section outlines the expected behaviors of the application, both at the system and software level. 
The requirements will serve as a basis for the design and development of the application and ensure that it meets the needs of its users. 
The requirements described below will cover all aspects of the application's behavior, including its functionality, performance, reliability, 
usability, and security. These requirements will be used as a reference throughout the development process to ensure that the final product meets 
all expectations.


1.	Project Scope
2.	Requirements
2.1.	System Requirements
2.1.1.	UX/UI requirements
2.1.2.	Performance Requirements
2.1.3.	Account Requirements
2.2.	Software Requirements
2.2.1.	Content Page requirements
2.2.2.	Module Requirements
2.2.3.	Network Requirements
2.2.4.	Navigation menu requirements
2.2.5.	Recommendation requirements
3.	Software Architecture Overview
4.	Detailed Software Architecture
4.1.	Platform
4.2.	Modules
4.3.	Recommendation Engine
4.4.	Networking
4.5.	Security


--------------------------------------------------------------------------------------------------------------------------------------------


The Trinity application is a modular content delivery mechanism that uses a recommendation algorithm to present users with personalized content. 
The modular design allows for easy creation and uploading of different content types, while maintaining a common format for ease of creation and 
reccomendation.

Each module will have a dedicated database location on the apps centeral server, where real-time updates are stored such as recommendation 
characteristics, user comments, statistics, and other relevant information. The server is also used for package updates to add new modules 
to the app without the need for full software updates to be installed on user devices.

The recommendation algorithm utilizes  machine learning techniques to learn and understand user preferences, which is used to present the user with 
content that fits their interests.

The app features offline functionality, with the server connection being non-critical for the app to function. This will be achieved through local 
caching and data storage techniques.

Overall, the Trinity software architecture is designed to provide users with a flexible, personalized, and seamless content delivery experience, 
while maintaining ease of use for developers and efficient creation and delivery of new content.
